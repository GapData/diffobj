% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/diff.R
\name{diff_obj}
\alias{diff_chr}
\alias{diff_chr,}
\alias{diff_deparse}
\alias{diff_obj}
\alias{diff_print}
\alias{diff_print,}
\alias{diff_str}
\alias{diff_str,}
\title{Show Diffs Between the Screen Display Versions of Two Objects}
\usage{
diff_print(target, current, mode = getOption("diffobj.mode"),
  context = getOption("diffobj.context"), etc = diffobj_etc(), ...)

diff_str(target, current, mode = getOption("diffobj.mode"),
  context = getOption("diffobj.context"), etc = diffobj_etc(), ...)

diff_chr(target, current, mode = getOption("diffobj.mode"),
  context = getOption("diffobj.context"), etc = diffobj_etc(), ...)

diff_deparse(target, current, mode = getOption("diffobj.mode"),
  context = getOption("diffobj.context"), etc = diffobj_etc(), ...)

diff_obj(target, current, mode = getOption("diffobj.mode"),
  context = getOption("diffobj.context"), etc = diffobj_etc(), ...)
}
\arguments{
\item{target}{the reference object}

\item{current}{the object being compared to \code{target}}

\item{context}{integer(1L) how many lines of context are shown on either side
of differences, set to \code{-1L} to allow as many as possible.  Set to
\dQuote{auto} to display as much context as possible without violating
\code{line.limit}, or alternatively pass the return value of
\code{link{auto_context}} to fine tune the parameters of the auto context
calculation}

\item{...}{additional arguments to pass on to \code{print}, etc.}
}
\value{
a \code{\link{diffObjDiff}} object, invisibly.  This function is
  intended primarily to be used for its side-effects, but the return value
  is available so that you may display the diff differently without needing
  to recompute it (note: unfortunately the wrap diff is always recomputed
  on display)
}
\description{
Highlights at a glance the \bold{display} differences between
two objects.  Lack of display differences is no guarantee that the objects
are the same.  Use \code{identical} or \code{all.equal} to confirm objects
are not different.  For basic usage we recommend you look at the examples.
If you are interested in the details, read on.
}
\note{
: differences shown or reported by these functions may not be the
  totality of the differences between objects since display methods may not
  display all differences.  This is particularly true when using \code{str}
  for comparisons with \code{max.level} since differences inside unexpanded
  recursive levels will not be shown at all.
}
\section{Overview}{


\itemize{
  \item \code{diff_print} prints the objects, captures the output, and runs
    the diff on the captured output
  \item \code{diff_str} runs \code{str} on the objects, captures the output
    and runs the diff on the captured output.  If a \code{line.limit} is
    specified, it will attempt to find a \code{max.level} for which the
    output fits within the limit.  You can specify an explicit
    \code{max.level} to prevent this behavior (see \code{\link{str}}).  Note
    that using a \code{max.level} lower than the deepest nested level of an
    object may conceal display differences between objects.  You will be
    alerted to this if you did \bold{not} specify \code{max.level} yourself.
  \item \code{diff_obj} picks between \code{diff_print} and \code{diff_str}
    depending on which one it thinks will provide the most useful diff.
  \item \code{diff_chr} will run the diff directly on the actual character
    values provided, or those values coerced to character if they are not
    character.
  \item \code{diff_dep} will run the diff on the deparsed input objects
}
}

\section{Output}{


The result of the diff provides the information necessary to transform the
\code{target} object into the \code{current} object.  This involves deletions
from and additions to \code{target}.  The deletions and additions are done
linewise.  Each deleted line will have \code{- } prepended to it, and each
added line will have \code{+ } prepended to it.  If your terminal supports
ANSI escape sequences the additions and deletions will be color coded.

The first lines of output clarify the coding convention by showing the
\code{target} object with the deletion symbology, and the \code{current}
object with the addition symbology.  After these lines you will see the
first and possibly only hunk header.  The format will be \code{@ x,y z,w @}
where \code{x} and \code{z} indicate the starting line of the text in
the \code{target} and \code{current} objects that is shown after the hunk
header.  \code{y} and \code{w} indicate how many lines from each of those
objects are being shown.

In addition to the primary line diff, hunks are themselves word-diffed within
each hunk to help quickly identify small differences.  Just keep in mind that
the \code{+-} symbols always relate to the original line diff.  The
word-diff is indicated only by the ANSI escape sequence styling and will not
be visible if your terminal does not support them or if you disable them.

The output format used here is loosely based on the \code{git diff} format.
}

\section{Display Modes}{


You can control the diff display mode via the \code{mode} argument.  We
implement similar modes to those available in GNU diff:

\itemize{
  \item unified: this is the diff mode used by \code{gitdiff}
  \item sidebyside: line up the differences side by side
  \item context: show the target and current hunks in their entirety; this
    mode takes up a lot of screen space but makes it easier to see what the
    objects actually look like
}
}

\section{Atomic Vectors}{


When using \code{diff_print} the function will recognize the wrapped printed
output for normal atomic vectors, and will carry out the diff element by
element rather than line by line.  The \code{+-} diff indicators in the
gutters will still reference the line diffs, but additionally the element by
element matches and differences will be highlighted with ANSI style escape
sequences.
}

\section{Diff Algorithm}{


The diff algorithm is Myer's solution to the shortest edit script /
longest common sequence problem with the Hirschberg linear space refinement
as described in:
\cite{
E. Myers, \dQuote{An O(ND) Difference Algorithm and Its Variations},
Algorithmica 1, 2 (1986), 251-266.
\url{http://www.cs.arizona.edu/people/gene/PAPERS/diff.ps}
}
and should be the same algorithm used by GNU diff.  The implementation
used here is an adaptation of Michael B. Allen's diff program from the
\href{
   http://www.ioplex.com/~miallen/libmba/dl/libmba-0.9.1.tar.gz
}{\code{libmba}} \code{C} library.

This algorithm scales with the \bold{square} of the number of differences
between compared objects so is most effective when comparing objects
that are mostly similar.
}

