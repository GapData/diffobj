% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/styles.R
\docType{class}
\name{Style-class}
\alias{Style}
\alias{Style-class}
\alias{StyleAnsi}
\alias{StyleAnsi-class}
\alias{StyleAnsi256DarkRgb}
\alias{StyleAnsi256DarkRgb-class}
\alias{StyleAnsi256DarkYb}
\alias{StyleAnsi256DarkYb-class}
\alias{StyleAnsi256LightRgb}
\alias{StyleAnsi256LightRgb-class}
\alias{StyleAnsi256LightYb}
\alias{StyleAnsi256LightYb-class}
\alias{StyleAnsi8NeutralRgb}
\alias{StyleAnsi8NeutralRgb-class}
\alias{StyleAnsi8NeutralYb}
\alias{StyleAnsi8NeutralYb-class}
\alias{StyleHtml}
\alias{StyleHtml-class}
\alias{StyleHtmlLightRgb}
\alias{StyleHtmlLightRgb-class}
\alias{StyleHtmlLightYb}
\alias{StyleHtmlLightYb-class}
\alias{StyleRaw}
\alias{StyleRaw-class}
\title{Customize Appearance of Diff}
\arguments{
\item{funs}{a \code{\link{StyleFuns}} object that contains all the functions
represented above}

\item{text}{a \code{\link{StyleText}} object that contains the non-content
text used by the diff (e.g. \code{gutter.insert.txt})}

\item{wrap}{TRUE or FALSE, whether the text should be hard wrapped to fit in
the console}

\item{pad}{TRUE or FALSE, whether text should be right padded}

\item{pager}{what type of \code{\link{Pager}} to use}

\item{na.sub}{what character value to substitute for NA elements; NA elements
are generated when lining up side by side diffs by adding padding rows; by
default the text styles replace these with a blank character string, and
the HTML styles leave them as NA for the HTML formatting functions to deal
with}

\item{blank}{sub what character value to replace blanks with; needed in
particular for HTML rendering (uses \code{"&nbsp;"}) to prevent lines from
collapsing}

\item{finalizer}{function that accepts at least two parameters and requires
no more than two parameters, will receive as the first parameter the
full text of the diff as a character vector, and the active
\code{\link{Pager}} as the second argument.  This allows final
modifications to the character output so that it is displayed correctly
by the pager.  For example, \code{StyleHtml} objects use it to generate
HTML headers if the \code{Diff} is destined to be displayed in a browser.
The \code{Pager} object is passed along to provide information about the
paging device to the function.}
}
\value{
Style S4 object
}
\description{
S4 objects that expose the formatting controls for \code{Diff}
objects.  Many predifined formats are defined as classes that extend the
base \code{Style} class.  You may fine tune styles by either extending
the pre-defined classes, or modifying an instance thereof.
}
\section{Pre-defined Classes}{


Pre-defined classes are used to populate the \code{\link{PaletteOfStyles}}
object, which in turn allows the \code{diff*} methods to pick the
appropriate \code{Style} for each combination of the \code{format},
\code{color.mode}, and \code{brightness} parameters when the \code{style}
parameter is set to \dQuote{auto}.  The following classes are pre-defined:

\itemize{
  \item \code{Style}: No styles applied
  \item \code{StyleAnsi8NeutralRgb}
  \item \code{StyleAnsi8NeutralYb}
  \item \code{StyleAnsi256LightRgb}
  \item \code{StyleAnsi256LightYb}
  \item \code{StyleAnsi256DarkRgb}
  \item \code{StyleAnsi256DarkYb}
  \item \code{StyleHtmlLightRgb}
  \item \code{StyleHtmlLightYb}
}
Each of these classes has an associated constructor function with the
same name (see examples).  Objects instantiated from these classes
may also be used directly as the value for the \code{style} parameter to the
\code{diff*} methods. This will override the automatic selection process
that uses \code{\link{PaletteOfStyles}}.

There are predefined classes for most combinations of
\code{format/color.mode/brightness}, but not all.  For example, there are
only \dQuote{light} \code{brightness} defined for the \dQuote{html}
\code{format}, and that class is re-used for all possible
\code{brightness} values.  \code{\link{PaletteOfStyles}} substitutes an
appropriate class when necessary (e.g. \code{StyleAnsi8NeutralYb} for the
neutral yellow-blue Ansi256 entry).

To get a preview of what a style looks like just instantiate
an object; the \code{show} method will output a trivial diff to screen with
styles applied.  Note that for ANSI styles of the dark and light variety
the show method colors the terminal background and foregrounds in compatible
colors.  In normal usage the terminal background and foreground colors are
left untouched so you should not expect light styles to look good on dark
background and vice versa even if they render correctly when showing the
style object.
}

\section{Style Structure}{


Most of the customization is done by specifying functions that operate on
character vectors and return a modified character vector of the same length.
The intended use case is to pass \code{crayon} functions such as
\code{crayon::red}, although you may pass any function of your liking
that behaves as described.

The visual representation of the diff has many nested components.  The
functions you specify here will be applied starting with the innermost ones.
A schematic of the various component that represent an inserted line follows
(note dQuote{insert} abbreviated to \dQuote{ins}, and \dQuote{gutter}
abbreviated to \dQuote{gtr}):
\preformatted{+- line ---------------------------------------------------+
|+- line.ins ---------------------------------------------+|
||+- gtr ------------------------++- text ---------------+||
|||+- gtr.ins ---++- gtr.pad ---+||+- text.ins ---------+|||
||||             ||             ||||      +- word.ins -+||||
|||| gtr.ins.txt || gtr.pad.txt |||| DIFF | TEXT HERE  |||||
||||             ||             ||||      +------------+||||
|||+-------------++-------------+||+--------------------+|||
||+------------------------------++----------------------+||
|+--------------------------------------------------------+|
+----------------------------------------------------------+
}
A similar model applies to deleted and matching lines.  The boxes represent
functions.  \code{gutter.insert.txt} represents the text to use in the gutter
and is not a function. \code{DIFF TEXT HERE} is text from the objects being
diffed, with the portion that has different words inside the
\code{word.insert} and is obviously not a function either.
\code{gutter.pad} and \code{gutter.pad.txt} are used to separate the gutter
from the text and usually end up resolving to a space.

Most of the functions defined here default to \code{\link{identity}}, but
you are given the flexibility to fully format the diff.  See
\code{\link{StyleFuns}} and \code{\link{StyleText}} for a full listing of
the adjustable elements.

In side-by-side mode there are two \dQuote{lines} per screen line, each with
the structure described here.

The structure described here may change in the future.
}

\section{HTML Styles}{


If you use a \code{Style} that inherits from \code{StyleHtml} the
diff will be wrapped in HTML tags, styled with CSS, and output to
a web browser by the pager.  The HTML output will be a full stand-alone
HTML page with references to the built-in cascading style sheet.  If the
pager is disabled or is not \code{\link{PagerBrowser}} then only the raw
HTML for the diff is output.

Should you want to capture the HTML output for use elsewhere, you can do
so by using \code{as.character} on the return value of the \code{diff*}
methods.  If you want the raw HTML without any of the headers and links to
css use \code{html.ouput="diff.only"} when you instantiate the \code{Style}
object (see examples), or disable the \code{\link{Pager}}.  Another option
is \code{html.output="diff.w.style"} which will add a \code{<style></style>}
tag pair with all the CSS styles crammed therein.  This last option results
in illegal HTML with a \code{<style>} floating around the
\code{<body>}, but appears to work and is useful if you want to embed HTML
someplace but do not have access to the headers.

Unlike with ANSI styles, you should not modify the styling functions in the
\code{@funs} slot of the \code{Style} object.  Instead, provide your own
styles.  See \code{diffobj_css()} for the predefined styles.  The styles are
structured so that they are applied to any element within a container of a
particular class.

To provide your own custom CSS style specify it with a \code{Style} object
as the value for the \code{style} parameter for the \code{diff*} methods
(see example), or modify the default \code{\link{PaletteOfStyles}} object,
set the \dQuote{diffobj.css} option.

If you define your own custom \code{StyleHtml} object you may want to modify
the slot \code{@funs@container}.  This slot contains a function that is
applied to the entire diff output.  For example, \code{StyleHtmlLightRgb}
uses \code{@funs@container <- cont_f("light", "rgb")}.  \code{cont_f} returns
a function that accepts a character vector as an argument and returns
that value wrapped in a \code{DIV} block with class
\dQuote{"diffobj_container light rgb"}.  This allows the CSS style sheet to
target the \code{Diff} elements with the correct styles.
}
\examples{
## Create a new style based on existing style by changing
## gutter symbols and guide color; see `?StyleFuns` and
## `?StyleText` for a full list of adjustable elements
my.style <- StyleAnsi8NeutralYb()
my.style   ## `show` method gives you a preview of the style
my.style@text@gutter.insert <- "+++"
my.style@text@gutter.delete <- "---"
my.style@funs@text.guide <- crayon::green
my.style   ## Notice gutters and guide color

## Provide a custom style sheet; here we assume there is a style sheet at
## `HOME/web/mycss.css`
\dontrun{
my.css <- file.path(path.expand("~"), "web", "mycss.css")
diffPrint(1:5, 2:6, style=StyleHtmlLightYb(css=my.css))
}
## Return only the raw HTML without any of the headers
as.character(
  diffPrint(1:5, 2:6, style=StyleHtmlLightYb(html.output="diff.only"))
)
}

